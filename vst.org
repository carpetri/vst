#+TITLE:     Visualizaci칩n de Series Temporales
#+AUTHOR:    Oscar Perpi침치n Lamigueiro
#+DATE: 24 de Octubre de 2014

#+OPTIONS: H:3
#+PROPERTY: eval no
#+PROPERTY: exports both 
#+PROPERTY: results output graphics

* Introducci칩n

** Paquetes
*** CRAN Task View
**** [[http://CRAN.R-project.org/view%3DTimeSeries][CRAN Tasks View ``Time Series Analysis'']]
     - zoo
     - xts

\cite{Ripley.Hornik2001} 
\cite{Grothendieck.Petzoldt2004}

# *** zoo
# The \texttt{zoo} package \cite{Zeileis.Grothendieck2005} provides an
# \texttt{S3} class with methods for indexed totally ordered
# observations. Its key design goals are independence of a particular
# index class and consistency with base \textsf{R} and the \texttt{ts}
# class for regular time series.

# \index{yearmon@\texttt{yearmon}}
# \index{yearqtr@\texttt{yearqtr}}

# Objects of class \texttt{zoo} are created by the function \texttt{zoo}
# from a numeric vector, matrix, or a factor that is totally ordered by
# some index vector. This index is usually a measure of time but every
# other numeric, character, or even more abstract vector that provides a
# total ordering of the observations is also suitable. It must be noted
# that this package defines two new index classes, \texttt{yearmon} and
# \texttt{yearqtr}, for representing monthly and quarterly data,
# respectively.

# The package defines several methods associated with standard generic
# functions such as \texttt{print}, \texttt{summary}, \texttt{str},
# \texttt{head}, \texttt{tail}, and \texttt{[} (subsetting). In
# addition, standard mathematical operations can be performed with
# \texttt{zoo} objects, although only for the intersection of the
# indexes of the objects.

# On the other hand, the data stored in \texttt{zoo} objects can be
# extracted with \texttt{coredata}, which drops the index information,
# and can be replaced by \texttt{coredata<-}. The index can be extracted
# with \texttt{index} or \texttt{time}, and can be modified by
# \texttt{index<-}. Finally, the \texttt{window} and \texttt{window<-}
# methods extract or replace time windows of \texttt{zoo} objects.

# Two \texttt{zoo} objects can be merged by common indexes with
# \texttt{merge} and \texttt{cbind}. The \texttt{merge} method combines
# the columns of several objects along the union or the intersection of
# the indexes. The \texttt{rbind} method combines the indexes (rows) of
# the objects.

# The \texttt{aggregate} method splits a \texttt{zoo} object into
# subsets along a coarser index grid, computes a function (\texttt{sum}
# is the default) for each subset, and returns the aggregated
# \texttt{zoo} object.

# This package provides four methods for dealing with missing
# observations:
# \begin{enumerate}
# \item \texttt{na.omit} removes incomplete observations.
# \item \texttt{na.contiguous} extracts the longest consecutive stretch
#   of non-missing values.
# \item \texttt{na.approx} replaces missing values by linear
#   interpolation.
# \item \texttt{na.locf} replaces missing observations by the most
#   recent non-\texttt{NA} prior to it.
# \end{enumerate}

# The package defines interfaces to \texttt{read.table} and
# \texttt{write.table} for reading, \texttt{read.zoo}, and writing,
# \texttt{write.zoo}, \texttt{zoo} series from or to text files.  The
# \texttt{read.zoo} function expects either a text file or connection as
# input or a \texttt{data.frame}. \texttt{write.zoo} first coerces its
# argument to a \texttt{data.frame}, adds a column with the index, and
# then calls \texttt{write.table}.

# *** xts
# The \texttt{xts} package \cite{Ryan.Ulrich2013} extends the
# \texttt{zoo} class definition to provide a general time-series
# object. The index of an \texttt{xts} object must be of a time or date
# class: \texttt{Date}, \texttt{POSIXct}, \texttt{chron},
# \texttt{yearmon}, \texttt{yearqtr}, or \texttt{timeDate}. With this
# restriction, the subset operator \texttt{[} is able to extract data
# using the
# ISO:8601\footnote{\url{http://en.wikipedia.org/wiki/ISO_8601}} time
# format notation \texttt{CCYY-MM-DD HH:MM:SS}. It is also possible to
# extract a range of times with a \texttt{from/to} notation, where both
# from and to are optional. If either side is missing, it is
# interpreted as a request to retrieve data from the beginning, or
# through the end of the data object.

# Furthermore, this package provides several time-based tools:
# \begin{itemize}
# \item \texttt{endpoints} identifies the endpoints with respect to
#   time.
# \item \texttt{to.period} changes the periodicity to a coarser time
#   index.
# \item The functions \lstinline{period.*} and \lstinline{apply.*}
#   evaluate a function over a set of non-overlapping time periods.
# \end{itemize}


# *** lattice
# The \texttt{lattice} package \cite{Sarkar2010} is an independent
# implementation of Trellis graphics, which were mostly influenced by
# \emph{The Elements of Graphing Data} \cite{Cleveland1994}. Trellis
# graphics often consist of a rectangular array of panels. The
# \texttt{lattice} package uses a \emph{formula} interface to define the
# structure of the array of panels with the specification of the
# variables involved in the plot. The result of a \texttt{lattice}
# high-level function is a \texttt{trellis} object.

# For bivariate graphics, the formula is generally of the form
# \lstinline{y ~ x} representing a single panel plot with \texttt{y} versus
# \texttt{x}. This formula can also involve expressions. The main
# function for bivariate graphics is \texttt{xyplot}.

# Optionally, the formula may be \lstinline{y ~ x | g1 * g2} and \texttt{y}
# is represented against \texttt{x} conditional on the variables
# \texttt{g1} and \texttt{g2}. Each unique combination of the levels of
# these conditioning variables determines a subset of the variables
# \texttt{x} and \texttt{y}. Each subset provides the data for a single
# panel in the Trellis display, an array of panels laid out in columns,
# rows, and pages.

# For example, in the following code, the variable \texttt{wt} of the
# dataset \texttt{mtcars} is represented against the \texttt{mpg}, with
# a panel for each level of the categorical variable \texttt{am}. The
# points are grouped by the values of the \texttt{cyl} variable.

# \lstset{language=R,numbers=none}
# \begin{lstlisting} 
# xyplot(wt ~ mpg | am, data = mtcars, groups = cyl)
# \end{lstlisting}

# For trivariate graphics, the formula is of the form 
# \lstinline{z ~ x * y}, where \texttt{z} is a numeric response, 
# and \texttt{x} and \texttt{y} are numeric values evaluated on a
# rectangular grid. Once again, the formula may include conditioning
# variables, for example \lstinline{z ~ x * y | g1 * g2}. The main
# function for these graphics is \texttt{levelplot}.

# The plotting of each panel is performed by the panel function, specified in
# a high-level function call as the \texttt{panel} argument. Each
# high-level \texttt{lattice} function has a default panel function,
# although the user can create new Trellis displays with custom panel
# functions.

# \texttt{lattice} is a member of the recommended packages list so it is
# commonly distributed with \textsf{R} itself. There are more than 250
# packages depending on it, and the most important packages for our
# purposes (\texttt{zoo}, \texttt{sp}, and \texttt{raster}) define
# methods to display their classes using \texttt{lattice}.

# \index{Packages!latticeExtra@\texttt{latticeExtra}} 

# On the other hand, the \texttt{latticeExtra} package
# \cite{Sarkar.Andrews2012} provides additional flexibility for the
# somewhat rigid structure of the Trellis framework implemented in
# \texttt{lattice}. This package complements the \texttt{lattice} with
# the implementation of layers via the \texttt{layer} function, and
# superposition of \texttt{trellis} objects and layers with the
# \lstinline{+.trellis} function. Using both packages, you can define a
# graphic with the formula interface (under the \texttt{lattice} model)
# and overlay additional content as layers (following the
# \texttt{ggplot2} model).

# *** ggplot2

# The \texttt{ggplot2} package \cite{Wickham2009} is an implementation
# of the system proposed in \emph{The Grammar of Graphics}
# \cite{Wilkinson1999}, a general scheme for data visualization that
# breaks up graphs into semantic components such as scales and
# layers. Under this framework, the definition of the graphic with
# \texttt{ggplot2} is done with a combination of several functions
# that provides the components, instead of the formula interface of
# \texttt{lattice}.

# With \texttt{ggplot2}, a graphic is composed of
# \begin{itemize}
# \item A dataset, \texttt{data}, and a set of mappings from variables
#   to aesthetics, \texttt{aes}.
# \item One or more layers, each composed of: a geometric object,
#   \texttt{geom\_*}, to control the type of plot you create (points,
#   lines, etc.); a statistical transformation, \texttt{stat\_*}; and a
#   position adjustment (and optionally, additional dataset and
#   aesthetic mappings).
# \item A scale, \texttt{scale\_*}, to control the mapping from data to
#   aesthetic attributes. Scales are common across layers to ensure a
#   consistent mapping from data to aesthetics.
# \item A coordinate system, \texttt{coords\_*}.
# \item Optionally, a faceting specification, \texttt{facet\_*}, the
#   equivalent of Trellis graphics with panels.
# \end{itemize}

# The function \texttt{ggplot} is typically used to construct a plot
# incrementally, using the \texttt{+} operator to add layers to the
# existing ggplot object.  For instance, the following code (equivalent to
# the previous \texttt{lattice} example) uses \texttt{mtcars} as
# the dataset, and maps the \texttt{mpg} variable on the x-axis and the
# \texttt{wt} variable on the y-axis. The geometric object is the point
# using the \texttt{cyl} variable to control the color. Finally, the
# levels of the \texttt{am} variable define the panels of the graphic.

# \lstset{language=R,numbers=none}
# \begin{lstlisting}
# ggplot(mtcars, aes(mpg, wt)) +
#     geom_point(aes(colour=factor(cyl))) +
#     facet_grid(. ~ am)
# \end{lstlisting}
 
# This package is increasingly popular, with a list of more than ninety
# packages depending on it. On the other hand, few packages provide
# method definitions based on \texttt{ggplot2} to display their
# classes. In our context, only the \texttt{zoo} package defines the
# \texttt{autoplot} function based on it.


** Configuraci칩n
*** Cargar en el orden correcto
#+begin_src R
  library(lattice)
  library(ggplot2)
  library(latticeExtra)
  library(zoo)
#+end_src  
*** Tema para =lattice=
#+begin_src R
  myTheme <- custom.theme.2(pch=19, cex=0.7,
                            region=rev(brewer.pal(9, 'YlOrRd')),
                            symbol = brewer.pal(n=8, name = "Dark2"))
  myTheme$strip.background$col='transparent'
  myTheme$strip.shingle$col='transparent'
  myTheme$strip.border$col='transparent'
#+end_src  

*** Escalas
#+begin_src R
  xscale.components.custom <- function(...){
      ans <- xscale.components.default(...)
      ans$top=FALSE
      ans}
  yscale.components.custom <- function(...){
      ans <- yscale.components.default(...)
      ans$right=FALSE
      ans}
#+end_src

*** Establecemos opciones por defecto
#+begin_src R
  myArgs <- list(as.table=TRUE,
                 between=list(x=0.5, y=0.2),
                 xscale.components = xscale.components.custom,
                 yscale.components = yscale.components.custom)
  defaultArgs <- lattice.options()$default.args
  
  lattice.options(default.theme = myTheme,
                  default.args = modifyList(defaultArgs, myArgs))
#+end_src


* Serie Temporal Multivariante con Diferente Escala

** Datos

*** Aranjuez

#+begin_src R
  library(zoo)
  load('data/aranjuez.RData')
#+end_src

** Primera aproximaci칩n

*** lattice: =xyplot=
#+begin_src R :results output graphics :exports both :file figs/aranjuez.pdf
  ## The layout argument arranges panels in rows
  xyplot(aranjuez, layout=c(1, ncol(aranjuez)))
#+end_src
*** 
#+RESULTS:
[[file:figs/aranjuez.pdf]]

*** ggplot2: =autoplot=
#+begin_src R :results output graphics :exports both :file figs/aranjuezGG.pdf
  autoplot(aranjuez) + facet_free()
#+end_src
*** 
#+RESULTS:
[[file:figs/aranjuezGG.pdf]]

** Anotaciones
*** lattice
#+begin_src R :results output graphics :exports both :file figs/aranjuezXblocks.pdf
  library(grid)
  library(latticeExtra)
  
  ## Auxiliary function to extract the year value of a POSIXct time
  ## index
  Year <- function(x)format(x, "%Y")
  
  xyplot(aranjuez, layout=c(1, ncol(aranjuez)), strip=FALSE,
         scales=list(y=list(cex=0.6, rot=0)),
         panel=function(x, y, ...){
           ## Alternation of years
           panel.xblocks(x, Year,
                         col = c("lightgray", "white"),
                         border = "darkgray")
           ## Values under the average highlighted with red regions
           panel.xblocks(x, y<mean(y, na.rm=TRUE),
                         col = "indianred1",
                         height=unit(0.1, 'npc'))
           ## Time series
           panel.lines(x, y, col='royalblue4', lwd=0.5, ...)
           ## Label of each time series
           panel.text(x[1], min(y, na.rm=TRUE),
                      names(aranjuez)[panel.number()],
                      cex=0.6, adj=c(0, 0), srt=90, ...)
           ## Triangles to point the maxima and minima 
           idxMax <- which.max(y)
           panel.points(x[idxMax], y[idxMax],
                        col='black', fill='lightblue', pch=24)
           idxMin <- which.min(y)
           panel.points(x[idxMin], y[idxMin],
                        col='black', fill='lightblue', pch=25)
         })
#+end_src

*** 
#+RESULTS:
[[file:figs/aranjuezXblocks.pdf]]

*** ggplot2
- ggplot2 necesita un =data.frame= en formato /long/: =fortify=
#+begin_src R :eval no-export
  timeIdx <- index(aranjuez)
  
  long <- fortify(aranjuez, melt=TRUE)
#+end_src
*** ggplot2
- Bandas de valores por debajo de la media)
#+begin_src R :eval no-export
  ## Values below mean are negative after being centered
  scaled <- fortify(scale(aranjuez, scale=FALSE), melt=TRUE)
  ## The 'scaled' column is the result of the centering.
  ## The new 'Value' column store the original values.
  scaled <- transform(scaled, scaled=Value, Value=long$Value)
  underIdx <- which(scaled$scaled <= 0)
  ## 'under' is the subset of values below the average
  under <- scaled[underIdx,]
#+end_src

*** ggplot2

- Bandas consecutivas de a침os: =xts::endpoints=

#+begin_src R :eval no-export
  library(xts)
  ep <- endpoints(timeIdx, on='years')
  N <- length(ep[-1])
  ## 'tsp' is start and 'tep' is the end of each band
  tep <- timeIdx[ep]
  tsp <- timeIdx[ep[-(N+1)]+1]
  ## 'cols' is a vector with the color of each band
  cols <- rep_len(c('gray', 'white'), N)
#+end_src
*** ggplot2

- M칤nimos y m치ximos.
#+begin_src R :eval no-export
  minIdx <- timeIdx[apply(aranjuez, 2, which.min)]
  minVals <- apply(aranjuez, 2, min, na.rm=TRUE)
  mins <- data.frame(Index=minIdx,
                     Value=minVals,
                     Series=names(aranjuez))
  
  maxIdx <- timeIdx[apply(aranjuez, 2, which.max)]
  maxVals <- apply(aranjuez, 2, max, na.rm=TRUE)
  maxs <- data.frame(Index=maxIdx,
                     Value=maxVals,
                     Series=names(aranjuez))
#+end_src

*** ggplot2
#+begin_src R :eval no-export
  ggplot(data=long, aes(Index, Value)) +
      ## Time series of each variable
      geom_line(colour = "royalblue4", lwd = 0.5) +
      ## Year bands
      annotate(geom='rect', ymin = -Inf, ymax = Inf,
                xmin=tsp, xmax=tep,
                fill = cols, alpha = 0.4) +
      ## Values below average
      geom_rug(data=under,
               sides='b', col='indianred1') +
      ## Minima
      geom_point(data=mins, pch=25) +
      ## Maxima
      geom_point(data=maxs, pch=24) +
      ## Axis labels and theme definition
      labs(x='Time', y=NULL) +
      theme_bw() +
      ## Each series is displayed in a different panel with an
      ## independent y scale
      facet_free()
#+end_src


* Serie Temporal Multivariante con Misma Escala

** Primera aproximaci칩n
*** Datos
- Navarra
#+begin_src R
  load('data/navarra.RData')
#+end_src


*** lattice: =xyplot=
#+begin_src R :results output graphics :exports both :file figs/navarra.pdf
  avRad <- zoo(rowMeans(navarra, na.rm=1),
               index(navarra))
  pNavarra <- xyplot(navarra - avRad,
                     superpose=TRUE, auto.key=FALSE,
                     lwd=0.5, alpha=0.3,
                     col='midnightblue') 
  pNavarra
#+end_src

*** 
#+RESULTS:
[[file:figs/navarra.pdf]]

** Aspect Ratio and Rate of Change

*** lattice
#+begin_src R :results output graphics :exports both :file figs/navarraBanking.pdf
  xyplot(navarra - avRad,
         aspect='xy', cut=list(n=3, overlap=0.1),
         strip=FALSE,
         superpose=TRUE, auto.key=FALSE,
         lwd=0.5, alpha=0.3, col='midnightblue')
#+end_src

*** 
#+RESULTS:
[[file:figs/navarraBanking.pdf]]


** The Horizon Graph

*** Gr치fico de horizonte

El [[http://www.perceptualedge.com/articles/visual_business_intelligence/time_on_the_horizon.pdf][gr치fico de horizonte]] es especialmente 칰til para mostrar series temporales de diferencias de forma compacta:
- Comparar series.
- Detectar puntos sobresalientes.

T칠cnica:
- Los valores positivos y negativos comparten el mismo espacio
  vertical (negativos encima del eje horizontal) codificando el signo
  con color (azul-rojo).
- La magnitud de la diferencia se codifica con intensidad del color.
- Las bandas de color comparten la misma referencia, est치n superpuestas, con bandas m치s oscuras por delante de las claras.

*** =horizonplot=
- Diferencias respecto de la media entre localidades 
#+begin_src R :results output graphics :exports both :file figs/navarraHorizonplot.pdf
  library(latticeExtra)
  
  horizonplot(navarra-avRad,
              layout=c(1, ncol(navarra)),
              origin=0, colorkey=TRUE)
#+end_src

*** 
#+RESULTS:
[[file:figs/navarraHorizonplot.pdf]]

*** =horizonplot=
- Diferencias respecto a la media diaria interanual.
#+begin_src R 
  Ta <- aranjuez$TempAvg
  timeIndex <- index(aranjuez)
  longTa <- ave(Ta, format(timeIndex, '%j'))
  diffTa <- (Ta - longTa)
#+end_src

*** =horizonplot=
- Usamos =cut= para dedicar un panel a cada a침o.
#+begin_src R :results output graphics :exports both :file figs/diffTa_horizon.pdf
  years <- unique(format(timeIndex, '%Y'))
  
  horizonplot(diffTa, cut=list(n=8, overlap=0),
              colorkey=TRUE, layout=c(1, 8),
              scales=list(draw=FALSE,
                  y=list(relation='same')),
              origin=0, strip.left=FALSE) +
      layer(grid.text(years[panel.number()],
                      x = 0, y = 0.1, 
                      gp=gpar(cex=0.8),
                      just = "left"))
#+end_src

*** 
#+RESULTS:
[[file:figs/diffTa_horizon.pdf]]


* El Tiempo como Variable

** Definir grupos con el 칤ndice temporal

*** =splom= y =groups=
#+begin_src R :results output graphics :exports both :file figs/aranjuezSplom.png :width 4000 :height 4000 :res 600
  load('data/aranjuez.RData')
  
  ## Red-Blue palette with black added (12 colors)
  colors <- c(brewer.pal(n=11, 'RdBu'), '#000000')
  ## Rearrange according to months (darkest for summer)
  colors <- colors[c(6:1, 12:7)]
  
  splom(~as.data.frame(aranjuez),
          groups=format(index(aranjuez), '%m'),
        auto.key=list(space='right', 
            title='Month', cex.title=1),
        pscale=0, varname.cex=0.7, xlab='',
          par.settings=custom.theme(symbol=colors,
              pch=19), cex=0.3, alpha=0.1)
#+end_src

*** 
#+RESULTS:
[[file:figs/aranjuezSplom.png]]




** Definir paneles con el 칤ndice temporal

*** ggplot2

#+begin_src R :results output graphics :exports both  :width 2000 :height 2000 :res 300 :file figs/aranjuezFacetGrid.png
  ggplot(data=aranjuezRshp,
         aes(Radiation, Temperature)) +
      facet_grid(Statistic ~ month) +
      geom_point(col='skyblue4',
                 pch=19, cex=0.5,
                 alpha=0.3) +
      geom_rug() +
      stat_smooth(se=FALSE, method='loess',
                  col='indianred1', lwd=1.2) +
      theme_bw()
#+end_src

*** 
#+RESULTS:
[[file:figs/aranjuezFacetGrid.png]]


*** lattice
#+begin_src R :results output graphics :exports both :file figs/aranjuezOuterStrips.pdf
  useOuterStrips(xyplot(Temperature ~ Radiation | month * Statistic,
                        data=aranjuezRshp,
                        between=list(x=0),
                        col='skyblue4', pch=19,
                        cex=0.5, alpha=0.3)) +
      layer({
          panel.rug(..., col.line='indianred1',
                    end=0.05, alpha=0.6)
          panel.loess(..., col='indianred1',
                      lwd=1.5, alpha=1)
      })
#+end_src


*** 
#+RESULTS:
[[file:figs/aranjuezOuterStrips.pdf]]


* Gr치ficos Interactivos
** rCharts

*** rCharts
 
#+begin_src R
library(rCharts)
library(zoo)
library(lattice)

load('data/aranjuez.RData')
#+end_src

*** Highcharts

#+begin_src R
aranjuezDF <- as.data.frame(aranjuez)
aranjuezDF$tt <- as.numeric(as.POSIXct(index(aranjuez)))*1000
hp <- hPlot(TempAvg ~ tt, data = aranjuezDF, type = 'line')
hp$xAxis(type = 'datetime')
hp
#+end_src

*** Rickshaw
NO FUNCIONA :-(
#+begin_src R
rp <- rPlot(TempAvg ~ tt, data = aranjuezDF, type = 'line')
rp$set(slider = TRUE)
rp
#+end_src


*** Morris
#+begin_src R
aranjuezDF <- as.data.frame(arannjuez)
aranjuezDF$tt <- as.character(index(aranjuez))
mp <- mPlot(x = 'tt', y = c('TempAvg', 'TempMax'), type = 'Line',
            data = aranjuezDF)
mp$set(pointSize = 0, lineWidth = 1)
mp
#+end_src

*** 

#+LANGUAGE:  es
#+OPTIONS:   num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [xcolor={usenames,svgnames,dvipsnames}]
#+BEAMER_THEME: Goettingen
#+BEAMER_COLOR_THEME: rose
#+BEAMER_FONT_THEME: serif
#+LATEX_HEADER: \AtBeginSubsection[]{\begin{frame}[plain]\tableofcontents[currentsubsection,sectionstyle=show/shaded,subsectionstyle=show/shaded/hide]\end{frame}}
#+LATEX_HEADER: \lstset{keywordstyle=\color{blue}, commentstyle=\color{gray!90}, basicstyle=\ttfamily\small, columns=fullflexible, breaklines=true,linewidth=\textwidth, backgroundcolor=\color{gray!23}, basewidth={0.5em,0.4em}, literate={치}{{\'a}}1 {침}{{\~n}}1 {칠}{{\'e}}1 {칩}{{\'o}}1 {췈}{{\textordmasculine}}1}
#+LATEX_HEADER: \usepackage{mathpazo}
#+LATEX_HEADER: \hypersetup{colorlinks=true, linkcolor=Blue, urlcolor=Blue}
#+LATEX_HEADER: \usepackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{boxwidth=\textwidth, fontsize=\tiny, formatcom = {\color{black!70}}}
#+LATEX_HEADER: \usepackage{animate}
#+PROPERTY:  tangle yes
#+PROPERTY:  comments org
#+PROPERTY: session *R*


